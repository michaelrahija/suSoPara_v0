#randomly sample some rows:
# set.seed(1)
# samp <- sample(1:nrow(master),100)
# d <- d[samp,]
#####################
## clean addresses ##
#####################
#replace addresses on "Roma" with NA
test.i <- d$indirizzo == "Roma"
d$indirizzo[test.i] <- "NA"
####################
## create CAP     ##
####################
d$cap <- gsub(".*, ","",d$indirizzo)
d$cap <- gsub("-.*","",d$cap)
test.cap <- grepl("[0-9]{5}",d$cap)
d$cap[!test.cap] <- "NA"
##############################
##    ZONA                  ##
## *FIND WAY TO SOLVE NA    ##
##############################
blank <- d$zona == ""
d$zona[blank] = "NA"
# tab <-  d %>% group_by(zona) %>% summarize(num=length(indirizzo))
# tab$share = tab$num/nrow(d)
# tab$share <- round(tab$share, digits = 3)
# tab
############################
##      CLEAN PRICE       ##
############################
d$prezzo  <- gsub("^[€]","",d$prezzo)
d$prezzo <- gsub("[€] .*","",d$prezzo)
d$prezzo <- gsub("^ ","",d$prezzo)
d$prezzo <- gsub(" $","",d$prezzo)
d$prezzo <- gsub("[^a-zA-Z0-9]","",d$prezzo)
#change price withheld to NA
d$prezzo <- as.numeric(d$prezzo)
ibrary(data.table)
library(dplyr)
library(rvest)
library(romeHousePrices)
if(Sys.info()[4] == "JOSH_LAPTOP"){
workingDir = "~/GitHub/romeHousePrices"
savingDir = "~/../Dropbox/romeHouseData/"
} else if(Sys.info()[4] == "joshuaUbuntuLinux"){
workingDir = "~/Documents/Github/romeHousePrices"
} else if(Sys.info()[4] =="Michaels-MacBook-Pro-2.local"||
Sys.info()[4] == "Michaels-MBP-2.lan"){
workingDir = "~/Dropbox/romeHousePrices/"
savingDir = "~/DropBox/romeHouseData/" #for michael's mac yo
} else {
stop("No directory for current user!")
}
dataFiles = list.files(savingDir, pattern = ".Rdta")
mioFiles = dataFiles[grepl("^Vend_Casa", dataFiles)]
load(paste0(savingDir,mioFiles))
d <- as.data.frame(master)
#########################
##   GENERAL CLEANING  ##
#########################
# REMOVE DUPLICATES
d <- unique(d)
#clean column names
colnames(d) <- gsub("[^a-zA-Z0-9]","",colnames(d))
#randomly sample some rows:
# set.seed(1)
# samp <- sample(1:nrow(master),100)
# d <- d[samp,]
#####################
## clean addresses ##
#####################
#replace addresses on "Roma" with NA
test.i <- d$indirizzo == "Roma"
d$indirizzo[test.i] <- "NA"
####################
## create CAP     ##
####################
d$cap <- gsub(".*, ","",d$indirizzo)
d$cap <- gsub("-.*","",d$cap)
test.cap <- grepl("[0-9]{5}",d$cap)
d$cap[!test.cap] <- "NA"
##############################
##    ZONA                  ##
## *FIND WAY TO SOLVE NA    ##
##############################
blank <- d$zona == ""
d$zona[blank] = "NA"
# tab <-  d %>% group_by(zona) %>% summarize(num=length(indirizzo))
# tab$share = tab$num/nrow(d)
# tab$share <- round(tab$share, digits = 3)
# tab
############################
##      CLEAN PRICE       ##
############################
d$prezzo  <- gsub("^[€]","",d$prezzo)
d$prezzo <- gsub("[€] .*","",d$prezzo)
d$prezzo <- gsub("^ ","",d$prezzo)
d$prezzo <- gsub(" $","",d$prezzo)
d$prezzo <- gsub("[^a-zA-Z0-9]","",d$prezzo)
#change price withheld to NA
d$prezzo <- as.numeric(d$prezzo)
#explore a bit Imb Casa_vendita
library(data.table)
library(dplyr)
library(rvest)
library(romeHousePrices)
if(Sys.info()[4] == "JOSH_LAPTOP"){
workingDir = "~/GitHub/romeHousePrices"
savingDir = "~/../Dropbox/romeHouseData/"
} else if(Sys.info()[4] == "joshuaUbuntuLinux"){
workingDir = "~/Documents/Github/romeHousePrices"
} else if(Sys.info()[4] =="Michaels-MacBook-Pro-2.local"||
Sys.info()[4] == "Michaels-MBP-2.lan"){
workingDir = "~/Dropbox/romeHousePrices/"
savingDir = "~/DropBox/romeHouseData/" #for michael's mac yo
} else {
stop("No directory for current user!")
}
dataFiles = list.files(savingDir, pattern = ".Rdta")
mioFiles = dataFiles[grepl("^Vend_Casa", dataFiles)]
load(paste0(savingDir,mioFiles))
d <- as.data.frame(master)
#########################
##   GENERAL CLEANING  ##
#########################
# REMOVE DUPLICATES
d <- unique(d)
#clean column names
colnames(d) <- gsub("[^a-zA-Z0-9]","",colnames(d))
#randomly sample some rows:
# set.seed(1)
# samp <- sample(1:nrow(master),100)
# d <- d[samp,]
#####################
## clean addresses ##
#####################
#replace addresses on "Roma" with NA
test.i <- d$indirizzo == "Roma"
d$indirizzo[test.i] <- "NA"
####################
## create CAP     ##
####################
d$cap <- gsub(".*, ","",d$indirizzo)
d$cap <- gsub("-.*","",d$cap)
test.cap <- grepl("[0-9]{5}",d$cap)
d$cap[!test.cap] <- "NA"
##############################
##    ZONA                  ##
## *FIND WAY TO SOLVE NA    ##
##############################
blank <- d$zona == ""
d$zona[blank] = "NA"
# tab <-  d %>% group_by(zona) %>% summarize(num=length(indirizzo))
# tab$share = tab$num/nrow(d)
# tab$share <- round(tab$share, digits = 3)
# tab
############################
##      CLEAN PRICE       ##
############################
d$prezzo  <- gsub("^[€]","",d$prezzo)
d$prezzo <- gsub("[€] .*","",d$prezzo)
d$prezzo <- gsub("^ ","",d$prezzo)
d$prezzo <- gsub(" $","",d$prezzo)
d$prezzo <- gsub("[^a-zA-Z0-9]","",d$prezzo)
#change price withheld to NA
d$prezzo <- as.numeric(d$prezzo)
colnames(d)
tab <- d %>% group_by(Locali) %>% summarize(n())
tab
data.frame(tab)
source('~/Dropbox/ad_hoc_R/regression models/Quiz1.R')
.4(1.5)
.4*(1.5)
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
mean <- mean(x)
sd <- sd(x)
(x - mean)/sd
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(x~y)
lm(y~x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
meanx(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
lm(x~x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y~x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
num <- sum(x*y)
denom <- sum(x^2)
num/denom
library(datasets)
df <- data(mtcars)
lm(mpg ~ wt, data = mtcars)
.4*(1.5)
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
mean <- mean(x)
sd <- sd(x)
(x - mean)/sd
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y~x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
lm(x~x)
summary(cars)
data(diamond)
library(ggplot2)
data(diamond)
library(datasets)
data("diamonds")
head(ddiamonds)
head(diamonds)
y <- diamonds$price
x <- diamonds$carat
residuals(lm(y~x))
sum(residuals(lm(y~x)))
res <- residuals(lm(y~x))
mod <- lm(y~x)
mod
yhat <- predict(mod)
res == (yhat - y)
yhat <- predict(mod)
sum(resid(mod) == y - yhat)
install.packages("dict")
install.packages("installr") # install
setInternet2(TRUE)
installr::updateR() # updating R.
names = c("Michael Austin Rahija","Lucia Rita Latino")
gsub(pattern = "[Aa-zZ]+ \s", "", names)
gsub(pattern = "[Aa-zZ]+ ", "", names)
gsub(pattern = "[Aa-zZ]+ \s", "", names)
gsub(pattern = "[Aa-zZ]+ \\s", "", names)
gsub(pattern = "[Aa-Zz]+ \s", "", names)
gsub(pattern = "[Aa-Zz]+ \\s", "", names)
gsub(pattern = "[Aa-Zz]+ ", "", names)
gsub(pattern = "[aA-Zz]+ ", "", names)
gsub(pattern = "[aA-Zz]+  ", "", names)
gsub(pattern = "[aA-Zz]+\s  ", "", names)
gsub(pattern = "^[aA-Zz]+ ", "", names)
gsub(pattern = "^[aA-Zz]+ \\s", "", names)
class(names)
gsub(pattern = "^[Aa-Zz]+ \\s", "", names)
gsub(pattern = "^[Aa-Zz]+\\s", "", names)
gsub(pattern = "^[A-Za-z]+\\s", "", names)
gsub(pattern = "\s  [A-Za-z]+", names)
gsub(pattern = "\\s  [A-Za-z]+", names)
gsub(pattern = "\\s  [A-Za-z]+","", names)
gsub(pattern = "\s  [A-Za-z]+", names)
names = gsub(pattern = "^[A-Za-z]+\\s", "", names)
names
gsub(pattern = "\s  [A-Za-z]+", names)
gsub(pattern = "  [A-Za-z]+", names)
gsub(pattern = "  [A-Za-z]+", "",names)
gsub(pattern = "//s [A-Za-z]+", "",names)
gsub(pattern = "//s[A-Za-z]+", "",names)
gsub(pattern = "\\s[A-Za-z]+", "",names)
5*.4 + 10 * .6
(5/15) * .4 + (10/15) * .6
theta=seq(from=0,to=1,by=.01)
thea
theta
plot(theta,dbeta(theta,1,1),type="l")
theta=seq(from=0,to=1,by=.01)
dbeta(theta,4,2)
theta
?dbeta
# 4) Find probabilities using the pbeta function.
1-pbeta(.25,8,4)
1-pbeta(.5,8,4)
1-pbeta(.8,8,4)
# 5) Posterior is Beta(8+33,4+40-33) = Beta(41,11)
41/(41+11)  # posterior mean
33/40       # MLE
lines(theta,dbeta(theta,41,11))
plot(theta,dbeta(theta,8,4),type="l")
lines(theta,dbeta(theta,41,11))
plot(theta,dbeta(theta,41,11),type="l")
lines(theta,dbeta(theta,8,4),lty=2)
plot(theta,dbeta(theta,1,5),type="l")
pbeta(.5,4,0)
1/6
pbeta(.5,5,1)
pbeta(.5,1,5)
qbeta(.975,8,16)
1-pbeta(.35,8,18)
pbeta(.35,8,18)
qbeta(.975,8,16)
pbeta(.35,8,16)
qbeta(.975,8,16)
pbeta(.35,8,21)
8+9+12+10+15+13
67/6
qgamma(.05,67,6)
67+109
8*.01
sqrt(1000)
sqrt((1/16))
.20/.25
(1/16)/.8
1/20
5/4
(1/16)/1.25
20+12+15+8+13.5+25
6/93.5
pgamma(.1,6,93.5)
pgamma(1,6,93.5)
pgamma(.1,5,93.5)
x <- c (3, 16, 8, 114, 60, 4, 23, 30, 105, 1)
x
y <- c (3, 16, 8, 114, 60, 4, 23, 30, 105, 1)
sum(y) + 30
1-.025
qgamma(.975,9,394)
plotGamma <- function(shape=2, rate=0.5, to=0.99, p=c(0.1, 0.9), cex=1, ...){
to <- qgamma(p=to, shape=shape, rate=rate)
curve(dgamma(x, shape, rate), from=0, to=to, n=500, type="l",
main=sprintf("gamma(x, shape=%1.2f, rate=%1.2f)", shape, rate),
bty="n", xaxs="i", yaxs="i", col="blue", xlab="", ylab="",
las=1, lwd=2, cex=cex, cex.axis=cex, cex.main=cex, ...)
gx <- qgamma(p=p,  shape=shape, rate=rate)
gy <- dgamma(x=gx, shape=shape, rate=rate)
for(i in seq_along(p)) { lines(x=rep(gx[i], 2), y=c(0, gy[i]), col="blue") }
for(i in seq_along(p)) { text(x=gx[i], 0, p[i], adj=c(1.1, -0.2), cex=cex) }
}
plotGamma(9,394)
y <- c (16, 8, 114, 60, 4, 23, 30, 105)
sum(y) + 30
gamma <- seq(0,1,.05)
gamma
lambda<- seq(0,1,.05)
plot(lambda,dgamma(9,390),type="l")
lambda
dgamma(9,390)
130+130+6.40+65+50+50+230+81+70
550/812
x = (94.6, 95.4, 96.2, 94.9, 95.9)
x = c(94.6, 95.4, 96.2, 94.9, 95.9)
mean(x)
sum(x) + 100
(sum(x) + 100)/6
x = append(x,100)
mean(x)
var = 1/((6/.25) + 1/var(x))
var
qnorm(.975,96.17,.042)
pnorm(100,96.17,.042)
qnorm(.975,96.17,sd(.042))
qnorm(.975,96.17,sqrt(.042))
pnorm(100,96.17,sqrt(.042))
var(x)
mean(X)
mean(x)
mean(sum(x),100)
sum(x) + 100
677/6
x = c(94.6, 95.4, 96.2, 94.9, 95.9)
x = append(x,100)
mean(x)
var(6)/6
x = c(94.6, 95.4, 96.2, 94.9, 95.9)
var(x)/6
mean(X)
mean(x)
var(x)/6 + .25
install.packages("swirl")
install_from_swirl("Regression Models")
library(swirl)
install_from_swirl("Regression Models")
1. Introduction
?InstallCourses
library(swirl)
?swirl
main()
df <- data.frame(x = c(1,3,4), y = 1,2,4)
df$sum <- df$x + df$y
sum(df$sum)
df <- data.frame(x = c(1,3,4), y = c(1,2,4))
df$sum <- df$x + df$y
sum(df$sum)
#script to look at SuSo paradata
library(tidyr)
library(dplyr)
library(foreign)
library(readr)
library(reshape)
sys <- Sys.info()
if(sys[5] == "x86_64"){
wdir = "~/Dropbox/suSoPara_temp" #Mac
para = "~/Dropbox/suSoPara/uganda_para/"
} else if (sys[6]=="Rahija") {
wdir = "C:/Users/rahija/Dropbox/suSoPara_temp" #FAO PC
para = "C:/Users/rahija/Dropbox/suSoPara/uganda_para/"
} else {
stop("Implement location for current user!")
}
setwd(wdir)
#Import paradata, add column to id interview,
#create posix column for actions
p.files <- list.files(para, pattern = ".tab")
head(p.files)
sys <- Sys.info()
if(sys[5] == "x86_64"){
wdir = "~/Dropbox/suSoPara_temp" #Mac
para = "~/Dropbox/suSoPara_data/uganda_para/"
} else if (sys[6]=="Rahija") {
wdir = "C:/Users/rahija/Dropbox/suSoPara_temp" #FAO PC
para = "C:/Users/rahija/Dropbox/suSoPara/uganda_para/"
} else {
stop("Implement location for current user!")
}
setwd(wdir)
#Import paradata, add column to id interview,
#create posix column for actions
p.files <- list.files(para, pattern = ".tab")
p.files
setwd(wdir)
#Import paradata, add column to id interview,
#create posix column for actions
p.files <- list.files(para, pattern = ".tab")
p.files <- paste0(para,p.files)
# Create table with all actions
source("R/actionTable.R")
#para.list <- list()
system.time({
#para.list <- vector(mode = "list", length = length(p.files))
para.list <- list()
for(i in 1:length(p.files)){
temp.df <- actionTable(dir = p.files[i])
para.list[[i]] <-  temp.df
}})
#script to look at SuSo paradata
library(tidyr)
library(dplyr)
library(foreign)
library(readr)
library(reshape)
sys <- Sys.info()
if(sys[5] == "x86_64"){
wdir = "~/Dropbox/suSoPara" #Mac
para = "~/Dropbox/suSoPara/uganda_para/"
} else if (sys[6]=="Rahija") {
wdir = "C:/Users/rahija/Dropbox/suSoPara" #FAO PC
para = "C:/Users/rahija/Dropbox/suSoPara/uganda_para/"
} else {
stop("Implement location for current user!")
}
setwd(wdir)
#Import paradata, add column to id interview,
#create posix column for actions
p.files <- list.files(para, pattern = ".tab")
p.files <- paste0(para,p.files)
#create posix column for actions
p.files <- list.files(para, pattern = ".tab")
p.files <- paste0(para,p.files)
# Create table with all actions
source("R/actionTable.R")
#para.list <- list()
system.time({
#para.list <- vector(mode = "list", length = length(p.files))
para.list <- list()
for(i in 1:length(p.files)){
temp.df <- actionTable(dir = p.files[i])
para.list[[i]] <-  temp.df
}})
para.df <- data.table::rbindlist(para.list)
#script to look at SuSo paradata
library(tidyr)
library(dplyr)
library(foreign)
library(readr)
library(reshape)
sys <- Sys.info()
if(sys[5] == "x86_64"){
wdir = "~/Dropbox/suSoPara" #Mac
para = "~/Dropbox/suSoPara/uganda_para/"
} else if (sys[6]=="Rahija") {
wdir = "C:/Users/rahija/Dropbox/suSoPara" #FAO PC
para = "C:/Users/rahija/Dropbox/suSoPara/uganda_para/"
} else {
stop("Implement location for current user!")
}
setwd(wdir)
wdir
para
para = "~/Dropbox/suSoPara_data/uganda_para/"
setwd(wdir)
#Import paradata, add column to id interview,
#create posix column for actions
p.files <- list.files(para, pattern = ".tab")
p.files <- paste0(para,p.files)
p.files
#Import paradata, add column to id interview,
#create posix column for actions
p.files <- list.files(para, pattern = ".tab")
p.files <- paste0(para,p.files)
# Create table with all actions
source("R/actionTable.R")
#para.list <- list()
system.time({
#para.list <- vector(mode = "list", length = length(p.files))
para.list <- list()
for(i in 1:length(p.files)){
temp.df <- actionTable(dir = p.files[i])
para.list[[i]] <-  temp.df
}})
para.df <- data.table::rbindlist(para.list)
head(para.df)
str(para.df)
